// Abstract base class (Abstraction)
abstract class Animal {
    // Private attributes (Encapsulation)
    private String name;
    private int age;
    
    // Constructor
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    // Getter methods (Encapsulation)
    public String getName() {
        return name;
    }
    
    public int getAge() {
        return age;
    }
    
    // Abstract method (Abstraction)
    public abstract void makeSound();
    
    // Abstract method for movement
    public abstract void move();
    
    // Common method
    public void eat() {
        System.out.println(name + " is eating.");
    }
    
    // Method that can be overridden (Polymorphism)
    public void displayInfo() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

// Inheritance: Dog inherits from Animal
class Dog extends Animal {
    private String breed;
    
    public Dog(String name, int age, String breed) {
        super(name, age);  // Call parent constructor
        this.breed = breed;
    }
    
    // Implementation of abstract method
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Woof! Woof!");
    }
    
    // Implementation of abstract method
    @Override
    public void move() {
        System.out.println(getName() + " runs on four legs.");
    }
    
    // Method overriding (Polymorphism)
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Breed: " + breed);
    }
    
    // Dog-specific method
    public void wagTail() {
        System.out.println(getName() + " is wagging tail happily!");
    }
}

// Inheritance: Cat inherits from Animal
class Cat extends Animal {
    private boolean isIndoor;
    
    public Cat(String name, int age, boolean isIndoor) {
        super(name, age);
        this.isIndoor = isIndoor;
    }
    
    // Implementation of abstract method
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Meow! Meow!");
    }
    
    // Implementation of abstract method
    @Override
    public void move() {
        System.out.println(getName() + " walks gracefully and climbs.");
    }
    
    
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Indoor cat: " + (isIndoor ? "Yes" : "No"));
    }
    
    
    public void purr() {
        System.out.println(getName() + " is purring contentedly.");
    }
}

/
public class OOPDemo {
    public static void main(String[] args) {
        System.out.println("=== Object-Oriented Programming Demo ===\n");
        
        // Creating objects (Instantiation)
        Dog dog = new Dog("Buddy", 3, "Golden Retriever");
        Cat cat = new Cat("Whiskers", 2, true);
        
        
        Animal[] animals = {dog, cat};
        
        System.out.println("--- Animal Information ---");
        for (Animal animal : animals) {
            animal.displayInfo();  // Polymorphic method call
            animal.makeSound();    // Polymorphic method call
            animal.move();         // Polymorphic method call
            animal.eat();          // Common method
            System.out.println();
        }
        
        System.out.println("--- Specific Behaviors ---");
        // Accessing specific methods
        dog.wagTail();
        cat.purr();
        
        System.out.println("\n--- OOP Concepts Demonstrated ---");
        System.out.println("1. ABSTRACTION: Animal abstract class with abstract methods");
        System.out.println("2. INHERITANCE: Dog and Cat inherit from Animal");
        System.out.println("3. ENCAPSULATION: Private attributes with public getter methods");
        System.out.println("4. POLYMORPHISM: Same method calls produce different behaviors");
    }
}


interface Drivable {
    void start();
    void stop();
    double calculateFuelCost(double distance);
}


abstract class Vehicle implements Drivable {
    // Protected attributes (Encapsulation)
    protected String brand;
    protected String model;
    protected int year;
    private boolean isRunning;
    
    // Constructor
    public Vehicle(String brand, String model, int year) {
        this.brand = brand;
        this.model = model;
        this.year = year;
        this.isRunning = false;
    }
    
    
    public String getBrand() { return brand; }
    public String getModel() { return model; }
    public int getYear() { return year; }
    public boolean isRunning() { return isRunning; }
    
    
    public void start() {
        if (!isRunning) {
            isRunning = true;
            System.out.println(brand + " " + model + " started.");
        } else {
            System.out.println(brand + " " + model + " is already running.");
        }
    }
    
    public void stop() {
        if (isRunning) {
            isRunning = false;
            System.out.println(brand + " " + model + " stopped.");
        } else {
            System.out.println(brand + " " + model + " is already stopped.");
        }
    }
    
   
    public abstract void displaySpecs();
    
    // Method that can be overridden (Polymorphism)
    public void honk() {
        System.out.println("Beep beep!");
    }
}


class Car extends Vehicle {
    private int doors;
    private double fuelEfficiency; // km per liter
    
    public Car(String brand, String model, int year, int doors, double fuelEfficiency) {
        super(brand, model, year);
        this.doors = doors;
        this.fuelEfficiency = fuelEfficiency;
    }
    
    // Implementation of abstract method
    @Override
    public void displaySpecs() {
        System.out.println("Car: " + brand + " " + model + " (" + year + ")");
        System.out.println("Doors: " + doors + ", Fuel Efficiency: " + fuelEfficiency + " km/L");
    }
    
    // Implementation of interface method
    @Override
    public double calculateFuelCost(double distance) {
        double fuelNeeded = distance / fuelEfficiency;
        double costPerLiter = 100.0; // ₹100 per liter
        return fuelNeeded * costPerLiter;
    }
    
    // Method overriding (Polymorphism)
    @Override
    public void honk() {
        System.out.println(brand + " " + model + " honks: Honk honk!");
    }
}

// Inheritance: Motorcycle extends Vehicle
class Motorcycle extends Vehicle {
    private int engineCC;
    private double fuelEfficiency;
    
    public Motorcycle(String brand, String model, int year, int engineCC, double fuelEfficiency) {
        super(brand, model, year);
        this.engineCC = engineCC;
        this.fuelEfficiency = fuelEfficiency;
    }
    
    // Implementation of abstract method
    @Override
    public void displaySpecs() {
        System.out.println("Motorcycle: " + brand + " " + model + " (" + year + ")");
        System.out.println("Engine: " + engineCC + "CC, Fuel Efficiency: " + fuelEfficiency + " km/L");
    }
    
    // Implementation of interface method
    @Override
    public double calculateFuelCost(double distance) {
        double fuelNeeded = distance / fuelEfficiency;
        double costPerLiter = 100.0; // ₹100 per liter
        return fuelNeeded * costPerLiter;
    }
    
    // Method overriding (Polymorphism)
    @Override
    public void honk() {
        System.out.println(brand + " " + model + " beeps: Beep beep!");
    }
    
    // Motorcycle-specific method
    public void wheelie() {
        if (isRunning()) {
            System.out.println(brand + " " + model + " performs a wheelie!");
        } else {
            System.out.println("Start the motorcycle first to perform a wheelie.");
        }
    }
}

// Composition: Garage contains Vehicles
class Garage {
    private Vehicle[] vehicles;
    private int capacity;
    private int currentCount;
    
    public Garage(int capacity) {
        this.capacity = capacity;
        this.vehicles = new Vehicle[capacity];
        this.currentCount = 0;
    }
    
    public boolean addVehicle(Vehicle vehicle) {
        if (currentCount < capacity) {
            vehicles[currentCount] = vehicle;
            currentCount++;
            System.out.println("Added " + vehicle.getBrand() + " " + vehicle.getModel() + " to garage.");
            return true;
        } else {
            System.out.println("Garage is full! Cannot add more vehicles.");
            return false;
        }
    }
    
    public void showAllVehicles() {
        System.out.println("\n--- Garage Inventory ---");
        if (currentCount == 0) {
            System.out.println("Garage is empty.");
            return;
        }
        
        for (int i = 0; i < currentCount; i++) {
            vehicles[i].displaySpecs();
            System.out.println("Status: " + (vehicles[i].isRunning() ? "Running" : "Stopped"));
            System.out.println();
        }
    }
    
    // Polymorphism demonstration
    public void startAllVehicles() {
        System.out.println("--- Starting all vehicles ---");
        for (int i = 0; i < currentCount; i++) {
            vehicles[i].start();
        }
    }
    
    public void honkAll() {
        System.out.println("--- All vehicles honking ---");
        for (int i = 0; i < currentCount; i++) {
            vehicles[i].honk(); // Polymorphic method call
        }
    }
}

// Main class
public class OOPDemo {
    public static void main(String[] args) {
        System.out.println("=== Java OOP Vehicle Demo ===\n");
        
        // Creating objects (Instantiation)
        Car car = new Car("Toyota", "Camry", 2023, 4, 15.0);
        Motorcycle bike = new Motorcycle("Honda", "CBR600", 2022, 600, 25.0);
        
        // Create garage (Composition)
        Garage garage = new Garage(5);
        
        // Add vehicles to garage
        garage.addVehicle(car);
        garage.addVehicle(bike);
        
        // Display all vehicles
        garage.showAllVehicles();
        
        // Demonstrate polymorphism
        garage.startAllVehicles();
        garage.honkAll();
        
        System.out.println("\n--- Fuel Cost Calculation ---");
        double distance = 100.0; // 100 km trip
        System.out.printf("Car fuel cost for %.0f km: ₹%.2f\n", 
                         distance, car.calculateFuelCost(distance));
        System.out.printf("Bike fuel cost for %.0f km: ₹%.2f\n", 
                         distance, bike.calculateFuelCost(distance));
        
        System.out.println("\n--- Specific Behaviors ---");
        bike.wheelie(); // Won't work - bike not started
        bike.start();
        bike.wheelie(); // Now it works
        
        System.out.println("\n--- OOP Concepts Used ---");
        System.out.println("✓ Abstraction: Abstract Vehicle class & Drivable interface");
        System.out.println("✓ Inheritance: Car & Motorcycle extend Vehicle");
        System.out.println("✓ Encapsulation: Private fields with public getters");
        System.out.println("✓ Polymorphism: Different honk() implementations");
    }
}



// Abstract base class (Abstraction)
abstract class Animal {
    // Private attributes (Encapsulation)
    private String name;
    private int age;
    
    // Constructor
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    // Getter methods (Encapsulation)
    public String getName() {
        return name;
    }
    
    public int getAge() {
        return age;
    }
    
    // Abstract method (Abstraction)
    public abstract void makeSound();
    
    // Abstract method for movement
    public abstract void move();
    
    // Common method
    public void eat() {
        System.out.println(name + " is eating.");
    }
    
    // Method that can be overridden (Polymorphism)
    public void displayInfo() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

// Inheritance: Dog inherits from Animal
class Dog extends Animal {
    private String breed;
    
    public Dog(String name, int age, String breed) {
        super(name, age);  // Call parent constructor
        this.breed = breed;
    }
    
    // Implementation of abstract method
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Woof! Woof!");
    }
    
    // Implementation of abstract method
    @Override
    public void move() {
        System.out.println(getName() + " runs on four legs.");
    }
    
    // Method overriding (Polymorphism)
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Breed: " + breed);
    }
    
    // Dog-specific method
    public void wagTail() {
        System.out.println(getName() + " is wagging tail happily!");
    }
}

// Inheritance: Cat inherits from Animal
class Cat extends Animal {
    private boolean isIndoor;
    
    public Cat(String name, int age, boolean isIndoor) {
        super(name, age);
        this.isIndoor = isIndoor;
    }
    
    // Implementation of abstract method
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Meow! Meow!");
    }
    
    // Implementation of abstract method
    @Override
    public void move() {
        System.out.println(getName() + " walks gracefully and climbs.");
    }
    
    // Method overriding (Polymorphism)
    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Indoor cat: " + (isIndoor ? "Yes" : "No"));
    }
    
    // Cat-specific method
    public void purr() {
        System.out.println(getName() + " is purring contentedly.");
    }
}

// Main class to demonstrate OOP concepts
public class OOPDemo {
    public static void main(String[] args) {
        System.out.println("=== Object-Oriented Programming Demo ===\n");
        
        // Creating objects (Instantiation)
        Dog dog = new Dog("Buddy", 3, "Golden Retriever");
        Cat cat = new Cat("Whiskers", 2, true);
        
        // Array of Animal references (Polymorphism)
        Animal[] animals = {dog, cat};
        
        System.out.println("--- Animal Information ---");
        for (Animal animal : animals) {
            animal.displayInfo();  // Polymorphic method call
            animal.makeSound();    // Polymorphic method call
            animal.move();         // Polymorphic method call
            animal.eat();          // Common method
            System.out.println();
        }
        
        System.out.println("--- Specific Behaviors ---");
        // Accessing specific methods
        dog.wagTail();
        cat.purr();
        
        System.out.println("\n--- OOP Concepts Demonstrated ---");
        System.out.println("1. ABSTRACTION: Animal abstract class with abstract methods");
        System.out.println("2. INHERITANCE: Dog and Cat inherit from Animal");
        System.out.println("3. ENCAPSULATION: Private attributes with public getter methods");
        System.out.println("4. POLYMORPHISM: Same method calls produce different behaviors");
    }
}
